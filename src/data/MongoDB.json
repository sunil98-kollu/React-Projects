{
  "topic": "MonogDb",
  "concepts": [
      {
  "topicID": 1,
      "head": "MonogDb",
      "title": "MonogDb",
  "notes": [
 

    {
      "type": "bullets",
      "list": [
        "--------------------->What is Database?-----------------------------------<",
        "A database is an organized collection of data",
        "It is stored and managed in digital format",
        "Used to store, retrieve, and manage information efficiently",
        "It allows users and applications to interact with the data in a structured and meaningful way"
      ]
    },
    {
      "type": "bullets",
      "list": [
         "---------------------> Relational Database Management System?-----------------------------------<",
        "Data Model (structured): Tabular data model with rows and columns",
        "Schema (fixed): The structure of the data must be defined in advance",
        "Scalability (vertically): Scaling up by adding more resources (CPU, RAM) to a single server",
        "Query Language: Uses SQL for defining and manipulating data",
        "Performance: Generally performs better with complex queries and transactions",
        "Examples: MySQL, Microsoft SQL Server, PostgreSQL, Oracle"
      ]
    },
    {
      "type": "bullets",
      "list": [
          "---------------------> NoSQL Database  ?-----------------------------------<",
        "Data Model (flexible):-- Supports document, key-value, column-family, or graph models",
        "Schema (schema-less):-- Allows data without predefined structure",
        "Scalability (horizontally):-- Scale out by adding more servers or nodes",
        "Query Language:-- Lacks a standard query language, often JSON-based",
        "Performance:-- Faster read/write operations in distributed systems",
        "Examples:-- MongoDB, DynamoDB, Cassandra, Redis"
      ]
    },
    {
      "type": "bullets",
      "list": [
          "--------------------->  What is MongoDB??<----------------------------------",
        "MongoDB is a popular NoSQL database",
        "Stores data in a flexible, JSON-like format called BSON (Binary JSON)",
        " MongoDB does not use tables or fixed schemas.",
         "---------------------> NoSQL-----------------------------------<",
       "MongoDB is a non-relational database",
 "It doesn't use structured tables and rows like SQL databases",
 " It stores data in documents"

      ]
    },
    {
      "type": "bullets",
      "list": [
         "--------------------->Databases and collections?-----------------------------------<",
        "In MongoDB, data is organized into databases and collections",
        "--------------------->Database:?-----------------------------------<",
        " A container for collections; a MongoDB instance can have multiple databases",
        "--------------------->Collection:-----------------------------------",
        " A group of MongoDB documents, similar to a relational table",
        "Collections don't enforce strict schema and can have different fields",
        "Collections don't enforce a strict schema.", 
       "Collection can have different fields (key-value pairs)."
      ]
    },
    {
      "type": "bullets",
      "list": [
          "--------------------->  Documents in MongoDB<---------------------------------",
        "MongoDB stores data as documents",
        "Documents are similar to JSON objects",
        "A document is a set of key-value pairs stored inside collections",
        "--------------------->  Document structure:-----------------------------------",
        " Keys are strings, values can be strings, numbers, arrays, or nested documents"
      ]
    }
  


  ]
      },
      {
       "topicID":2,
      "head": " Connect to MOngoDb  ",
      "title": " Connect to MOngoDb  ",
       "notes": [
        {
  "type": "bullets",
  "list": [
    "Create MongoDB Atlas Account:----> Go to MongoDB site → Try Atlas Free → Sign up (Google/email) → Accept terms → Redirected to Atlas Dashboard",
    "Create New Project:---> Dashboard → Projects dropdown → New Project → Enter project name → Next",
    "Set Up New Cluster:---> Choose cluster config, cloud provider, region, tier → Create Deployment",
    "Configure Cluster & Database Access:----> Security → Database Access → Add user (username, password) → Network Access → Whitelist IP",
    "Node.js Setup:----> mkdir project → npm init -y → npm install express dotenv (or express nodemon dotenv)",
    "Basic Server:----> const express=require('express'); const dotEnv=require('dotenv'); const app=express(); app.listen(3000,()=>console.log('Server running on http://localhost:3000'));",
    "Install MongoDB Package:----> npm install mongodb",
    ".env Setup:----> MONGODB_URL=mongodb+srv://username:password@cluster1.mongodb.net/?retryWrites=true&w=majority",
    "Connect to MongoDB:-----> const {MongoClient}=require('mongodb'); dotEnv.config(); const client=new MongoClient(process.env.MONGODB_URL); async function connectToDatabase(){try{await client.connect(); console.log('MongoDB connected');}catch(e){console.log('MongoDB connection failed',e);}}",
    "Start Server & Connect:----> app.listen(PORT,()=>{console.log(`Server started on port ${PORT}`); connectToDatabase();});"
  ]
}

       ]
         
    },
     {
        "topicID":3,
      "head": "  Crud Operations ",
      "title": "    Crud Operations ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": " Crud Operations ",
        "Language": "Node",
       "code":"//Insert Data in MongoDB\nconst express = require('express');\nconst dotEnv = require('dotenv');\nconst { MongoClient } = require('mongodb');\ndotEnv.config(); // Load environment variables from .env file\nconst app = express(); const PORT = 5001;\nconst client = new MongoClient(process.env.MONGODB_URL);\nasync function connectToDatabase() {\n try {\n   await client.connect();\n   console.log('MongoDB connected successfully');\n   const db = client.db('first-database');\n   const collection = db.collection('first-collection');\n   const insertResult = await collection.insertOne({name: 'Ram', age: 28});\n   console.log('Inserted document:', insertResult);\n } catch (error) {\n   console.log('MongoDB connection failed:', error);\n }\n}\n\n //Updating Documents in MongoDB\n1. Using Update Operators\n$set: Updates or adds a field.\n$unset: Removes a field from the document.\n$inc: Increments a field's value.\n$push: Adds an item to an Array.\n$pull: Removes an Item from an Array\nExample: collection.updateOne({ 'name': 'Ram' }, { $set: { 'grade': 'First' } })\n\n2. //Update a Single Document\nSyntax: collection.updateOne({ <filter> }, { $set: { <field>: <value> } })\nExample: const db = client.db('first-database'); const collection = db.collection('first-collection'); collection.updateOne({ 'name': 'Ram' }, { $set: { 'name': 'RamKumar' } })\n\n3.// Update Multiple Documents\nSyntax: collection.updateMany({ <filter> }, { $set: { <field>: <value>, <field>: <value> } })\nExample: const db = client.db('first-database'); const collection = db.collection('first-collection'); collection.updateMany({ 'name': 'Ramm' }, { $set: { 'name': 'Ramm' } })\n\n4.// Replace a Document\nSyntax: db.collection.replaceOne({ <filter> }, { <newDocument> })\nExample: collection.replaceOne({ 'name': 'Ramm' }, { 'name': 'Ram', 'age': 20, 'DOB': '06/07/2000', 'marks': [50, 60, 80] })\n\n  //Deleting Documents in MongoDB\n  //Delete a Single Document: Syntax \ncollection.deleteOne({ <filter> }) Example collection.deleteOne({ 'name': 'Hanuman' })\n //Delete Multiple Documents: Syntax collection.deleteMany({ <filter> }) Example collection.deleteMany({ 'name': 'Hanuman' })\n //Delete All Documents in a Collection: Syntax collection.deleteMany({}) Example collection.deleteMany({})\n  //Drop a Collection: Syntax collection.drop() Example collection.drop()"
       }
      },
       {
        "topicID":4,
      "head": " Querying Data in MongoDB  ",
      "title": "Querying Data in MongoDB ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "connect to MongoDB using Mongoose ",
        "Language": "Node",
        "code":"Querying Data in MongoDB\nQuerying in MongoDB involves retrieving data from your collections using various filters and conditions.\nFind All Documents:\nThe find() method retrieves all documents from a collection.\nSyntax: collection.find({})\nExample: users.find({})\nconst query = {age: { $gt: 28 }}; // no filter\nconst options = {\n projection: { _id: 0, name: 1, age: 1 },// Optional: Which fields to return\n // sort: { age: -1 }, // Optional: descending order\n // limit: 5, // Optional\n};\nconst documents = await collection.find(query, options).toArray();\nconsole.log('Documents found:', documents);\n\nOperators\nComparison Operators\n$eq: Equal to\n$ne: Not equal to\n$gt: Greater than\n$gte: Greater than or equal to\n$lt: Less than\n$lte: Less than or equal to\n\nLogical Operators\n$and\n$or\n$not\n$nor\n\n$eq (Equal to): Finds documents where a field is equal to a specified value.\n{ age: { $eq: 25 } }\n\n$ne (Not equal to): Finds documents where a field is not equal to a specified value.\n{ age: { $ne: 25 } }\n\n$gt (Greater than): Finds documents where a field is greater than a specified value.\n{ age: { $gt: 25 } }\n\n$gte (Greater than or equal to): Finds documents where a field is greater than or equal to a specified value.\n{ age: { $gte: 25 } }\n\n$lt (Less than): Finds documents where a field is less than a specified value.\n{ age: { $lt: 25 } }\n\n$lte (Less than or equal to): Finds documents where a field is less than or equal to a specified value.\n{ age: { $lte: 25 } }\n\n$and: Joins query clauses with a logical AND.\n{ $and: [{ age: { $gt: 20 } }, { age: { $lt: 30 } }] }\n\n$or: Joins query clauses with a logical OR.\n{ $or: [{ name: 'Ram' }] }\n\n$not: Inverts the effect of a query expression.\n{ age: { $not: { $gte: 30 } } }\n\n$nor: Joins query clauses with a logical NOR.\n{ $nor: [{ age: { $gt: 30 } }, { name: 'Ram' }] }"
        }
      },
      {
        "topicID":5,
      "head": " connect to MongoDB using Mongoose  ",
      "title": "connect to MongoDB using Mongoose ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "connect to MongoDB using Mongoose",
        "Language": "Node",
  "code": "connect to MongoDB using Mongoose\n1. Set Up and Create a MongoDB connection URI in .env file\nMONGODB_URL=mongodb+srv://vinodh:[password]@cluster1.3yqqn.mongodb.net/[databasename]?retryWrites=true\n2. Script in your server file\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst dotEnv = require(\"dotenv\");\nconst app = express();\napp.use(express.json());\ndotEnv.config();\nmongoose.connect(`${process.env.MONGO_URL}`, {\n   useNewUrlParser: true,\n   useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB Connected\"))\n .catch(err => console.error(err));\napp.listen(3000, () => console.log(\"Server running on port 3000\"));\n\n// Define a Schema\nconst userSchema = new mongoose.Schema({\n   name: String,\n   age: Number\n});\n// Create a Model\nconst User = mongoose.model(\"users\", userSchema);\n\n// Insert Data\nconst newUser = new User({ name: \"John\", age: 30 });\nnewUser.save()\n   .then(() => console.log(\"User Saved\"))\n   .catch(err => console.error(err));\n\n// Postman adds data using Mongoose\napp.post(\"/submit\",async (req, res)=>{\n   const newUser = new User(req.body);\n   await newUser.save()\n   res.status(201).json({ message: \"User Saved\", user: newUser });\n})\napp.get(\"/users\", async (req, res) => {\n   const users = await User.find();\n   res.send(users);\n});"
}
      },
      {
        "topicID":6,
      "head": "Create Application Architecture ",
      "title": "Create Application Architecture",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "Create Application Architecture",
         "Language": "Node",
        "code":"// Create Application Architecture\n\n1. models/userModel.js\nconst mongoose = require('mongoose')\nconst userSchema= new mongoose.Schema({\n   name: String,\n   age: Number\n})\nconst userModel =  mongoose.model('users', userSchema)\nmodule.exports = userModel;\n\n2. controller/userController.js\nconst express = require('express')\nconst userRoutes = express.Router();\nconst userModel = require('../models/users')\nconst getAllUsers =('/',async (req, res)=>{\n   const results = await userModel.find();\n   res.send(results)\n})\nconst createUser =('/',async (req, res)=>{\n   const singleUser = new userModel(req.body)\n   const newrecord = await singleUser.save();\n   res.status(201).send(newrecord)\n})\nconst updateUser =('/:id',async (req, res)=>{\n   const {id} = req.params;\n   const existingUser = await userModel.findById(id)\n   existingUser.age = req.body.age\n   const newrecord = await existingUser.save();\n   res.status(200).json({ message: 'User updated successfully', newrecord });\n})\nconst deleteUser =('/:id',async (req, res)=>{\n   const {id} = req.params;\n   const deletedUser = await userModel.findByIdAndDelete(id)\n   res.status(200).json({ message: 'User deleted successfully', deletedUser });\n})\nmodule.exports = { getAllUsers, createUser, updateUser, deleteUser };\n\n3. routes/userRoutes.js\nconst express = require('express');\nconst { getAllUsers, createUser, updateUser, deleteUser } = require('../controllers/users');\nconst userRoutes = express.Router();\nuserRoutes.get('/', getAllUsers);\nuserRoutes.post('/', createUser);\nuserRoutes.put('/:id', updateUser);\nuserRoutes.delete('/:id', deleteUser);\nmodule.exports = userRoutes;\n\n4. server.js\nconst express = require('express')\nconst app = express()\nconst mongoose = require('mongoose')\nconst dotenv = require('dotenv')\ndotenv.config();\nconst userRoutes = require('./routes/users')\napp.use(express.json())\napp.use('/users',userRoutes)\nconst connectDB=async()=>{\n   await mongoose.connect(process.env.MONGO_URL)\n   .then(()=>console.log('DB connected'))\n   .catch((err)=>console.log(err))\n}\napp.listen(3000, ()=>{\n   console.log('Server is running')\n   connectDB();\n})"
}
      }
  ]
}
