{
  "topic": "NodeJs",
  "concepts": [
 {
      "topicID": 1,
      "head": "Node Intro",
      "title": "Node",
      "notes": [
  {
    "type": "bullets",
    "list": [
      "The v8 engine refers to the JavaScript engine",
      "Developed by Google for the Chrome browser",
      "It is the core component responsible for executing JavaScript code",
      "The engine is implemented in C++ for speed and performance",
      "The V8 engine uses Just-In-Time (JIT) compilation"
    ]
  },
  {
    "type": "heading",
    "list": ["Compiled Execution (V8’s Approach)"]
  },
  {
    "type": "bullets",
    "list": [
      "It compiles the JavaScript into machine code first (Instead of directly executing the code line by line)",
      "The machine code is stored and reused during the program's execution",
      "This avoids the overhead of interpreting the same code multiple times",
      "Optimized performance: The engine identifies frequently used parts of the code (called hot code) and optimizes it further during execution"
    ]
  },
  {
    "type": "heading",
    "list": ["What is Node.js?"]
  },
  {
    "type": "bullets",
    "list": [
      "Node runs on the server, not in the browser",
      "It is built on Chrome's V8 JavaScript engine",
      "Node.js is an open-source, cross-platform JavaScript runtime environment",
      "The NodeJS is a single-threaded environment, which means that it runs one action at a time",
      "Node.js uses an event-driven, non-blocking I/O model, making it efficient and suitable for real-time applications"
    ]
  },
  {
    "type": "heading",
    "list": ["Single-threaded environment"]
  },
  {
    "type": "bullets",
    "list": [
      "JavaScript code runs on a single main thread",
      "Asynchronous tasks (e.g., file reads, API calls) are offloaded to the event loop",
      "Non-blocking I/O ensures high performance for handling multiple requests",
      "CPU-intensive tasks can use Worker Threads for multi-threading if needed"
    ]
  },
  {
    "type": "heading",
    "list": ["Event Loop"]
  },
  {
    "type": "bullets",
    "list": [
      "The event loop is a core concept in Node.js",
      "It is responsible for handling asynchronous operations",
      "It enables non-blocking I/O",
      "It allows Node.js to perform tasks, execute callbacks to the system while continuing to execute other code",
      "Node.js uses a single-threaded event loop model",
      "Enables high performance in Node.js by handling thousands of concurrent connections on a single thread",
      "Powers asynchronous programming in Node.js"
    ]
  },
  {
    "type": "heading",
    "list": ["Setting up Node.js Environment"]
  },
  {
    "type": "bullets",
    "list": [
      "Install Node",
      "Package Manager (npm or yarn)",
      "Code Editor (Visual Studio Code)",
      "Node Version Manager (nvm) Optional"
    ]
  },
  {
    "type": "heading",
    "list": ["How to install Node.js"]
  },
  {
    "type": "numbers",
    "list": [
      "Visit the Node.js website (https://nodejs.org)",
      "Download the recommended LTS (Long-Term Support) version",
      "Click on 'Next,' 'Next,' 'Next,' and install Node.js",
      "Open a terminal or command prompt",
      "Type the following command : node -v",
      "Press Enter",
      "Example Output: 'v20.11.1' (version number may vary)"
    ]
  }
]

  },
 {
      "topicID": 2,
      "head": "REPL",
      "title": "REPL",
"notes": [
  {
    "type": "heading",
    "list": ["Read-Eval-Print Loop (REPL)"]
  },
  {
    "type": "bullets",
    "list": [
      "It is an interactive programming environment",
      "Takes single user inputs (Read)",
      "Evaluates them (Eval)",
      "Prints the result (Print)",
      "Then loops back to wait for more user input (Loop)"
    ]
  },
  {
    "type": "heading",
    "list": ["Using the Node.js REPL"]
  },
  {
    "type": "numbers",
    "list": [
      "Open a terminal or command prompt",
      "Type the following command: node",
      "Press Enter",
      "The REPL prompt (>) indicates the REPL environment is ready to accept your commands"
    ]
  },
  {
    "type": "heading",
    "list": ["Simple Programs using REPL"]
  },
  {
    "type": "bullets",
    "list": [
      "Simple Calculations: `> 3 + 3`",
      "Create JavaScript Variables: `> let marks = 80`",
      "Create Functions: `> function add(a, b) { return a + b; }`",
      "Multiline Functions: `> function add(a, b) { ... return a * b; ... }`",
      "Accessing Node.js Modules: `> const fs = require('fs')` then `> fs.readFileSync('./example.txt', 'utf8')` returns `'Hello, World!'`"
    ]
  },
  {
    "type": "heading",
    "list": ["REPL Commands"]
  },
  {
    "type": "bullets",
    "list": [
      ".help – Displays help for the REPL commands",
      ".exit – Exit the REPL",
      ".editor – Allows writing multi-line JavaScript code",
      ".break – Gets you out of stuck situations"
    ]
  }
]

 },
 {
 "topicID": 3,
      "head": "Create 1st project",
      "title": " Steps Create 1st project",
  "notes": [
  {
    "type": "heading",
    "list": ["Create First Project in VS Code"]
  },
  {
    "type": "numbers",
    "list": [
      "Create an empty folder",
      "Load folder into VS Code",
      "Open terminal",
      "Enter this command: `npm init -y`",
      "Run the application: `node main.js`"
    ]
  },
  {
    "type": "heading",
    "list": ["Global Objects"]
  },
  {
    "type": "bullets",
    "list": [
      "console – Used to print to stdout and stderr",
      "`console.log('Hello, World!');`",
      "`console.error('Error message');`",
      "__dirname – Returns the directory name of the current module",
      "`console.log(__dirname);`",
      "__filename – Returns the file name of the current module",
      "`console.log(__filename);`",
      "process – Provides information about the current Node.js process",
      "`console.log(process.env); // Environment variables`",
      "`console.log(process.argv); // Command line arguments`",
      "process.env – Contains the user environment",
      "`console.log(process.env.NODE_ENV);` // Access NODE_ENV"
    ]
  },
  {
    "type": "heading",
    "list": ["Timers Objects"]
  },
  {
    "type": "bullets",
    "list": [
      "Timers are functions that allow you to execute code at a specified time interval or after a certain delay",
      "Timers are not perfectly accurate (can be delayed due to single-thread)",
      "Primary functions: `setTimeout`, `setInterval`",
      "Corresponding stop functions: `clearTimeout`, `clearInterval`"
    ]
  },
  {
    "type": "heading",
    "list": ["setTimeout"]
  },
  {
    "type": "code",
    "list": [
      "let timeoutID = setTimeout(function() {\n  console.log(\"delayed by 2 seconds\");\n}, 2000);"
    ]
  },
  {
    "type": "heading",
    "list": ["clearTimeout"]
  },
  {
    "type": "code",
    "list": ["clearTimeout(timeoutID);"]
  },
  {
    "type": "heading",
    "list": ["setInterval"]
  },
  {
    "type": "code",
    "list": [
      "let intervalID = setInterval(function() {\n  console.log(\"repeats every 3 seconds\");\n}, 2000);"
    ]
  },
  {
    "type": "heading",
    "list": ["clearInterval"]
  },
  {
    "type": "code",
    "list": ["clearInterval(intervalID);"]
  }
]

 },
 {
  "topicID": 4,
      "head": "Modules",
      "title": "Modules",
  "notes": [
  {
    "type": "heading",
    "list": ["Modules in JavaScript"]
  },
  {
    "type": "numbers",
    "list": [
      "JavaScript modules provide a way to break up your code into separate files",
      "Modules make code more organized, maintainable, and reusable",
      "Modules are imported from external files with the `import` statement",
      "Modules also rely on `type=\"module\"` in the <script> tag",
      "A web page opened via the `file://` protocol cannot use import/export"
    ]
  },
  {
    "type": "bullets",
    "list": [
      "JavaScript modules are reusable pieces of code",
      "They can be imported and exported within different files or programs"
    ]
  },
  {
    "type": "heading",
    "list": ["Types of Modules"]
  },
  {
    "type": "numbers",
    "list": [
      "ES6 Modules (ECMAScript 2015)",
      "CommonJS Modules (used primarily in Node.js)"
    ]
  },
  {
    "type": "heading",
    "list": ["ES6 Modules"]
  },
  {
    "type": "bullets",
    "list": [
      "ES6 introduced a standardized module system in JavaScript",
      "Widely used in modern web development"
    ]
  },
  {
    "type": "heading",
    "list": ["CommonJS Modules"]
  },
  {
    "type": "bullets",
    "list": [
      "CommonJS is primarily used in Node.js",
      "Commonly applied in server-side development"
    ]
  }
],
 "examples": {
        "title": "Modules",
        "Language": "Node",
        "code":"1. Exporting from a Module \n(use module.exports to export a module)\nfunction add(a, b) {\n   return a + b;\n}\nfunction subtract(a, b) {\n   return a - b;\n}\nmodule.exports = {\n   add,\n   subtract\n};\n\n2. Importing from a Module (use require to import a module)\n\nconst math = require('./math.js');\nconsole.log(math.add(2, 3)); // 5\nconsole.log(math.subtract(5, 3)); // 2\n\nCustom Modules\n\nCreate a new file for your module, e.g., common.js.\nfunction add(a, b) {\n   return a + b;\n}\n\nconst userWelcomeMsg = (name) => {\n   return `Hello, ${name}!`;\n}\nmodule.exports = {\n   add,\n   userWelcomeMsg\n};\n\nindex.js\nconst user = require('./common');\nconst greet = user.userWelcomeMsg('Ram');\nconsole.log(greet); // Hello, Ram!\n(or)\nconst { add, userWelcomeMsg } = require('./common');\nconst sum = add(10,20);\nconsole.log(sum); // 30\n"

      }

 },
 {
   "topicID": 5,
      "head": "Built in Modules",
      "title": "Built in Modules",
      "notes": [
        {
    "type": "heading",
    "list": ["Built in Modules"]
  }
      ],
       "examples": {
        "title": "Modules",
        "Language": "Node",
         "code":"\n os - Provides operating system-related utility methods and properties.\npath - Provides utilities for working with file and directory paths.\nfs (File System) - Provides an API for interacting with the file system.\nhttp - Allows Node.js to transfer data over HTTP.\nevents - Provides a way of working with events.\nurl - Provides utilities for URL resolution and parsing.\nquerystring - Provides utilities for parsing and formatting URL query strings.\ncrypto - Provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\n\nos Module\n\nos provides operating system-related utility methods and properties.\nconst os = require('os');\nconsole.log('Version:', os.version());\nconsole.log('Type:', os.type());\n(or)\nconsole.log('OS Platform:', os.platform());\nconsole.log('OS CPU architecture:', os.arch());\nconsole.log('Total memory:', os.totalmem());\nconsole.log('Free memory:', os.freemem());\nconsole.log('Cpus:', os.cpus());\n"

      }
 },
 {
  "topicID": 5,
      "head": "Path Modules",
      "title": "Path Modules",
       "notes": [],
        "examples": {
        "title": "path Modules",
        "Language": "Node",
 "code":"path Module\n\nprovides utilities for working with file and directory paths\n\nconst path = require('path');\n\n// Directory name of the current file\nconsole.log(path.dirname(__filename))\nconsole.log(path.basename(__filename))\nconsole.log(path.extname(__filename));\n\n// Object with parsed path details\nconsole.log(path.parse(__filename));\n\n// Combine paths\nconst directory = '/main/images';\nconst fileName = 'avatar/user.jpg';\nconsole.log(path.join(directory, fileName));// '/main/images/avatar/user.jpg'\n\n// Check if path is absolute\nconsole.log(path.isAbsolute('/foo/bar')); // true\nconsole.log(path.isAbsolute('foo/bar'));  // false\n\nFs (File System) Module\n\n1. It provides a way to interact with the file system.\n2. It allows to perform various file operations like reading, writing, deleting, and more.\n3. This module can be used synchronously or asynchronously.\n\nCommonly used methods of the fs module:\n* Reading Files (fs.readFile)\n* Writing Files (fs.writeFile)\n* Appending to Files (fs.appendFile)\n* Deleting Files (fs.unlink)\n* Renaming Files (fs.rename)\n* Checking File Existence (fs.access)\n* Creating Directories (fs.mkdir)\n* Reading Directories (fs.readdir)\n\n// Reading Files\nfs.readFile('sample.txt', 'utf8', (err, data) => {\n   if (err) { console.error(err); return; }\n   console.log(data);\n});\n\n// Writing File\nfs.writeFile('sample.txt', 'Hello, world!', (err) => {\n   if (err) { console.error(err); return; }\n   console.log('File written successfully');\n});\n\n// Appending to Files\nfs.appendFile('sample.txt', '\\nAppended new text.', (err) => {\n   if (err) { console.error(err); return; }\n   console.log('File appended successfully');\n});\n\n// Deleting Files\nfs.unlink('sample.txt', (err) => {\n   if (err) { console.error(err); return; }\n   console.log('File deleted successfully');\n});\n\n// Renaming Files\nfs.rename('oldFileName.txt', 'newFileName.txt', (err) => {\n   if (err) { console.error(err); return; }\n   console.log('File renamed successfully');\n});\n\n// Checking File Existence\nfs.access('sample.txt', fs.constants.F_OK, (err) => {\n   console.log(`${err ? 'File does not exist' : 'File exists'}`);\n});\n\n// Creating Directories\nfs.mkdir('SampleDir', { recursive: true }, (err) => {\n   if (err) { console.error(err); return; }\n   console.log('Directory created successfully');\n});\n\n// Reading Directories\nfs.readdir('SampleDir', (err, files) => {\n   if (err) { console.error(err); return; }\n   console.log('Directory contents:', files);\n});"

      }
 },
 {
  "topicID": 6,
      "head": "http Modules",
      "title": "http Modules",
       "notes": [],
        "examples": {
        "title": "Http Modules",
        "Language": "Node",
 "code":"http Module\n\nIt is used for creating HTTP servers and making HTTP requests in Node.js.\n\nCreating an HTTP Server\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n   res.write('This is first server application');\n   res.end();\n});\nserver.listen(5500);\n// Check server\n// Open browser and enter the port\n// http://localhost:5500/\n\n................ Creating an HTTP Server\n\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n \tres.writeHead(200, { 'Content-Type': 'text/plain' }); // application/json\n \tres.end('Hello, World!\\n');\n});\nserver.listen(5500, '127.0.0.1', () => {\n \tconsole.log(`Server running at http://${hostname}:${port}/`);\n});\n// Check server\n// Open browser and enter the port\n// http://localhost:5500/\n\n................... Handling Routes with Plain Text\n\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n \tres.writeHead(200, { 'Content-Type': 'text/plain' });\n \tif (req.url === '/') {\n   \t\tres.end('Home Page\\n');\n \t} else if (req.url === '/about') {\n   \t\tres.end('About Page\\n');\n \t} else {\n   \t\tres.end('404 Not Found\\n');\n \t}\n});\nserver.listen(3000, '127.0.0.1', () => {\n   console.log('Server running at http://127.0.0.1:3000/');\n});\n\n.............. Handling Routes with JSON Responses\n\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n \tres.writeHead(200, { 'Content-Type': 'application/json' });\n \tif (req.url === '/data') {\n   \t\tconst data = {\n     \t\tmessage: 'Hello, World!',\n     \t\ttimestamp: new Date(),\n   \t\t};\n   \t\tres.end(JSON.stringify(data));\n \t} else {\n   \t\tres.writeHead(404, { 'Content-Type': 'application/json' });\n   \t\tres.end(JSON.stringify({ error: '404 Not Found' }));\n \t}\n});\n\nserver.listen(3000, '127.0.0.1', () => {\n   console.log('Server running at http://127.0.0.1:3000/');\n});"


 }
 },
 
  {
  "topicID": 7,
      "head": "Event Modules",
      "title": "Event Modules",
       "notes": [],
       "examples": {
        "title": "Event Modules",
        "Language": "Node",
         "code":"events Module\n\n...............Event Emitter\n\n1. EventEmitter is a class.\n2. It is a part of the events module\n3. It is used to handle and manage events.\n4. It allows to create, emit, and listen to custom events\nThe events module allows working with event-driven programming.\nIt provides a way to handle asynchronous events, such as I/O operations, timers, and custom events.\n\nSteps to create Events\n1. Import events Module\n2. Create an instance using the EventEmitter class\n3. Use on method to attach a listener to an event\n4. Use emit method to trigger an event\n\nconst EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('message', () => {\n   console.log('Welcome to Hyderabad');\n});\nmyEmitter.emit('message');\n\nEvent Methods\n1. on(eventName, listener)\n2. once(eventName, listener)\n3. emit(eventName, [...args])\n4. removeListener(eventName, listener)\n5. removeAllListeners([eventName])\n6. listeners(eventName)\n7. listenerCount(eventName)\n8. eventNames()\n\non(eventName, listener)\nAdds a listener to the end of the listeners array for the specified event.\nemitter.on('event', (message) => {\n \tconsole.log(message);\n});\n(or)\nconst listener1 = (message) => console.log('Listener 1:', message);\nemitter.on('event', listener1);\nemitter.emit('event', 'Hello World!');\nemitter.emit('event', 'Hello World!');\n\nonce(eventName, listener)\n* Adds a one-time listener for the event.\n* It is invoked only the first time the event is fired, after which it is removed.\nemitter.once('event', (message) => {\n \tconsole.log(message);\n});\nemitter.emit('event', 'Hello World!');\nemitter.emit('event', 'Hello Again!'); // No output\n\nemit(eventName, [...args])\nSynchronously triggers the event handlers that are listening for the event.\nemitter.emit('event', 'Hello World!');\nemitter.emit('event', 'Hello Again!');\n\nremoveListener(eventName, listener)\nRemoves a specific listener from the listener array for the event named eventName.\n\nconst EventEmitter = require('events');\nconst emitter = new EventEmitter();\nconst messageListener = () => { console.log('Welcome to Hyderabad') };\nmyEmitter.on('message', messageListener);\nmyEmitter.removeListener('message', messageListener);\nmyEmitter.emit('message');\n\nremoveAllListeners([eventName])\nRemoves all listeners, or those of the specified event.\nemitter.on('event', (message) => {\n \tconsole.log('First:',message);\n});\nemitter.on('event', (message) => {\n \tconsole.log('Second:',message);\n});\nemitter.removeAllListeners('event');\nemitter.emit('event', 'Hello World!');\n\nlisteners(eventName)\nReturns a copy of the array of listeners for the event named eventName.\nconst listener1 = (message) => console.log('Listener 1:', message);\nconst listener2 = (message) => console.log('Listener 2:', message);\nemitter.on('event', listener1);\nemitter.on('event', listener2);\nconst listeners = emitter.listeners('event');\nconsole.log(listeners); // [[Function: listener1],[Function: listener2]]\nconsole.log(listeners.length); // Output: 2\n\nlistenerCount(eventName)\nReturns the number of listeners listening to the event named eventName.\nemitter.on('event', (message) => {\n   console.log('Listener:', message);\n});\nconst count = emitter.listenerCount('event');\nconsole.log(count); // Output: 1\n\neventNames()\nReturns an array listing the events for which the emitter has registered listeners.\n\nconst listener1 = (message) => console.log('Listener 1:', message);\nconst listener2 = (message) => console.log('Listener 2:', message);\nemitter.on('event1', listener1);\nemitter.on('event2', listener2);\nconst eventNames = emitter.eventNames();\nconsole.log(eventNames); // Output: [ 'event1', 'event2' ]"

       }
      },
       {
  "topicID": 8,
      "head": "URL Modules",
      "title": "URL Modules",
       "notes": [
         {
          "type": "bullets",
          "list": [
        "Modern URL handling uses the URL class.",
        "It provides utilities for URL resolution and parsing.",
        "It can be used to parse, format, resolve, and validate URLs."
          ]
        }
       
       ],
       "examples": {
        "title": "URL Modules",
        "Language": "Node",
        "code":"Steps to create url\n1) Import url Module\nconst { URL } = require('url');\n2) Parsing a URL\nconst urlString = 'https://www.xyz.com:8080/searchq=nodejs&oq=nodejs&gs_lcrp=EgZjaHJvbWU#hash';\nconst parsedUrl = new URL(urlString);\nurl.username = 'myname' // modify the URL\nconsole.log(parsedUrl);\n\n...............: Formatting a URL\nIt takes an URL object and returns a formatted URL string.\nconst obj = { protocol: 'https:', hostname: 'www.google.com', port: 8080, pathname: '/search', query: { q: 'nodejs', oq: 'nodejs' }, hash: '#hash' };\nconst formattedUrl = url.format(obj);\nconsole.log(formattedUrl);\no/p: https://www.google.com:8080/search?q=nodejs&oq=nodejs#hash\n\n........Resolving URLs\nIt resolves the target URL relative to the base URL.\nconst baseUrl = 'https://www.google.com:8080';\nconst relativeUrl = '/search.html?q=nodejs&oq=nodejs#hash';\nconst resolvedUrl = url.resolve(baseUrl, relativeUrl);\nconsole.log(resolvedUrl);\n\n.........URLSearchParams API\nIt provides utility methods to work with the query string of a URL.\nIf you pass a full URL, it will not parse the query parameters correctly.\nCreating a URLSearchParams Object\nconst { URLSearchParams } = require('url');\nconst params = new URLSearchParams('q=nodejs&oq=nodejs');\nconsole.log(params.get('q')); // nodejs\nconsole.log(params.get('oq')); // nodejs\nAdding and Deleting Parameters\nconst { URLSearchParams } = require('url');\nconst params = new URLSearchParams();\nparams.append('q', 'node');\nparams.append('oq', 'nodejs');\nconsole.log(params.toString()); // Output: q=nodejs&oq=nodejs\nparams.delete('q');\nconsole.log(params.toString()); // Output: oq=nodejs"

       }
      },
      {
        "topicID":9,
      "head": "WHATWG URL API ",
      "title": "WHATWG URL API ",
       "notes": [
         {
          "type": "bullets",
          "list": [
        
" It is a modern, standardized API for working with URLs in JavaScript.",
" It is a standardized interface for parsing, constructing, and manipulating URLs across web browsers and other environments like Node.js"

          ]
        }
       ],
       "examples": {
        "title": "WHATWG URL API",
        "Language": "Node",
         "code":"//Basic Parsing\nconst { URL } = require('url');\nconst myURL = new URL('https://www.google.com:8080/search?q=nodejs');\nconsole.log(myURL.href); // Output: fullurl\nReading Components\nconsole.log(url.protocol); // 'https:'\nModifying URL Components\nmyURL.pathname = '/expressjs';\nmyURL.searchParams.append('oq', 'nodejs');\n\n //............ querystring Module\n* It provides utilities for URL resolution and parsing.\n* It can be used to parse, format, resolve, and validate URLs.\n  //Steps to create url\nImport url Module\nconst querystring = require('querystring');\n //Parsing a URL\nconst queryString = 'q=nodejs&oq=nodejs&gs_lcrp=EgZjaHJvbWU';\nconst parsed = querystring.parse(queryString);\nconsole.log(parsed);\n// Output: { q: 'nodejs', oq: 'nodejs', gs_lcrp: 'EgZjaHJvbWU' }\n\nconst querystring=require('querystring');\n //Stringifying an Object\nconst obj = { q: 'nodejs', oq: 'nodejs', gs_lcrp: 'EgZjaHJvbWU' };\nconst queryString = querystring.stringify(obj);\nconsole.log(queryString); // 'q=nodejs&oq=nodejs&gs_lcrp=EgZjaHJvbWU'\n //Encoding a Query String\nconst escaped = querystring.escape('q=nodejs&oq=nodejs');\nconsole.log(escaped); // q%3Dnodejs%26oq%3Dnodejs\n //Decoding a Query String\nconst unescaped = querystring.unescape('q%3Dnodejs%26oq%3Dnodejs');\nconsole.log(unescaped); // q=nodejs&oq=nodejs"


       }
      },
      {
        "topicID":10,
      "head": "  Crypto Module",
      "title": "Crypto Module  ",
       "notes": [
         {
          "type": "bullets",
          "list": [
"* It provides cryptographic functionality. The hash is a one-way function, meaning once the data is hashed, it cannot be reversed to get the original input.",
"* It includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions." 
          ]
        }
       ],
       "examples": {
        "title": "Crypto Module",
        "Language": "Node",
         "code":"//Steps to use Crypto\nImport url Module\nconst crypto = require('crypto');\n //Create Hashing\nconst hash = crypto.createHash('sha256');//Secure Hash Algorithm 256-bit\nhash.update('Hello World');\nconst digest = hash.digest('hex');\nconsole.log(digest);\n//a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\n\n....... Create and Serve an HTML page using Node.js\n* Steps to Create and Serve an 'Home' HTML Page in Node.js:\n* Create a simple HTML file (like an 'home.html' page).\n* Set up a Node.js server to serve this HTML file.\nconst http = require('http')\nconst fs = require('fs')\nconst server = http.createServer((req, res)=>{\n   if(req.url==='/'){\n       fs.readFile('home.html',(err, data)=>{\n           res.writeHead(200, { 'Content-Type': 'text/html' });\n           res.end(data);\n       })\n   }\n})\nserver.listen(5001, console.log('Server Created'))"



       }
      },
      {
        "topicID":1,
      "head": "  Express ",
      "title": "Express   ",
       "notes": [
         {
          "type": "bullets",
          "list": [
 "Express.js is a Node.js web application framework ",
 "It provides tools for building web applications and APIs.",
 "It provides a robust set of features to develop web and mobile applications",
 "It is used to build single-page, multi-page, and hybrid web applications."

          ]
        }
       ],
       "examples": {
        "title": "Express  ",
        "Language": "Node",
       "code":"....................... express js Installation:\n* Create a folder\n* Open a terminal or command prompt cmd\n* Type the following command: npm init -y\n* Press Enter\n* Type the following command: npm install express\n(or)\nIf you install express along with nodemon: \nnpm install express nodemon\n\n................. Creating a Basic Server\n\nconst express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n \tres.send('Hello World!');\n});\napp.listen(3000, () => {\n console.log('Server is running on http://localhost:3000');\n});\nRun the app  node server.js\n\n[.................... API request methods (or) verbs\n1. Each method has a specific purpose\n2. It is used to convey the intent of the API request.\n\nGET: Retrieve information or data from the server.\nPOST: Create a new resource or submit data to the server.\nPUT: Update an existing resource with new data.\nPATCH: Partially update an existing resource with new data.\nDELETE: Remove a resource from the server"

       }
      },
      {
        "topicID":2,
      "head": "  Basic Routing ",
      "title": "Basic Routing   ",
       "notes": [
         {
          "type": "bullets",
          "list": [

" Routes are defined using the methods ",
" These methods are provided by the Express application object"

          ]
        }
       ],
       "examples": {
        "title": "Basic Routing  ",
        "Language": "Node",
       "code":"Ex:\napp.get()\napp.post()\napp.put()\napp.patch()\napp.delete()\n\nconst express = require('express');\nconst app = express();\napp.get('/', (req, res) => { res.send('Hello, World!'); });\napp.post('/submit', (req, res) => { res.send('Form submitted'); });\napp.put('/update/:id', (req, res) => { res.send(`Update item with ID: ${req.params.id}`); });\napp.delete('/delete/:id', (req, res) => { res.send(`Delete item with ID: ${req.params.id}`); });\napp.listen(3000, () => { console.log('Server is running on port 3000'); });\n\n...: app.all()\n* //app.all will handle all HTTP methods for the specified path.\n* It is typically used for tasks like logging, authentication, or setting response headers\n* It can also be used for generic route handling when you need a catch-all handler for a route.\n \n \n const express = require('express');\nconst app = express();\napp.all('/user', (req, res) => { console.log('Request method:', req.method); res.send('This is a user route with any HTTP method.'); });\napp.listen(4000, () => { console.log('Server running on port 4000'); });\n\n  // .... Route Parameters\n* They are placeholders in the URL.\n* It can be used to capture values.\n* Defined with a colon (:) in the route path.\napp.get('/user/:id', (req, res) => { const userId = req.params.id; res.send(`User ID: ${userId}`); });\n\n // .. Query Strings\n* Used to pass data in the URL.\n* They start with a ? followed by key-value pairs.\napp.get('/search', (req, res) => { const query = req.query.q; res.send(`Search query: ${query}`); });\n\n //....... Route Paths\nRoute paths are divided into two types:\n1. Static Paths\n2. Pattern Paths\n1) //Static Paths\nA static path matches exactly what’s in the URL.\napp.get('/about', (req, res) => { res.send('Hello World!'); });\n2) //Pattern Paths\nStrings and regular expressions to define route patterns\n// Matches \"/user/1\", \"/user/2\", etc. only contains digits\napp.get(/^\\/user\\/(\\d+)$/, (req, res) => { const userId = req.params[0]; res.send(`User ID: ${userId}`); });\n// Matches \"/abcd\", \"/abbcd\", \"/abbbbbbbcd\", etc.\napp.get(/^\\/ab+cd$/, (req, res) => { const userId = req.params[0]; res.send(`User ID: ${userId}`); });"

       }
      },
      {
        "topicID":3,
      "head": "Route Handlers ",
      "title": "Route Handlers ",
       "notes": [
         {
          "type": "bullets",
          "list": [


" Middleware functions can also act as route handlers.",
" Middleware functions can be chained to the route."
          ]
        }
       ],
       "examples": {
        "title": "Route Handlers ",
        "Language": "Node",
"code":"1. Middleware functions can also act as route handlers.\n2. Middleware functions can be chained to the route.\nconst express = require('express')\nconst app = express();\napp.use((req, res, next) => { console.log(`${req.method} ${req.url}`); next(); });\napp.get('/users',(req, res)=>{ console.log(req.url); res.send('Hello World'); })\napp.listen(5005, ()=>{ console.log('started...'); })"

       }
      },
       {
        "topicID":4,
      "head": " Middlewares ",
      "title": " Middlewares ",
       "notes": [
         {
          "type": "bullets",
          "list": [


" Middleware functions can also act as route handlers.",
" Middleware functions can be chained to the route."
          ]
        }
       ],
       "examples": {
        "title": " Middlewares ",
        "Language": "Node",
"code":"1. Middleware functions can also act as route handlers.\n2. Middleware functions can be chained to the route.\nconst express = require('express')\nconst app = express();\napp.use((req, res, next) => { console.log(`${req.method} ${req.url}`); next(); });\napp.get('/users',(req, res)=>{ console.log(req.url); res.send('Hello World'); })\napp.listen(5005, ()=>{ console.log('started...'); })"

       }
      },
      {
        "topicID":4,
      "head": " Types Middlewares ",
      "title": " Types Middlewares ",
       "notes": [
         {
          "type": "bullets",
          "list": [
 "Middleware route handlers are functions ",
 "This middleware acts as a logger. ",
 "It will execute during the lifecycle of a request to handle a specific task. ",
 "Middleware functions are called in sequence",
 "It can be decided whether to pass control to the next middleware or terminate the response.",
"Middleware can perform various tasks:",
 "Modifying the request objects",
 "Modifying the response objects",
 "Ending the request-response cycle",
 "Calling the next middleware function in the stack"
          ]
        }
       ],
       "examples": {
        "title": " Middlewares ",
        "Language": "Node",
"code":"//Syntax of Middleware\n\napp.use([path], middlewareFunction);\napp: An instance of Express.\npath: (Optional)\nA route path or a set of route paths to which the middleware function applies.\nIf not specified, the middleware applies to all paths.\nmiddlewareFunction: The function that defines the middleware behavior.\n\n: //Basic Middleware Function:\n\napp.use((req, res, next)=>{ console.log('Middleware executed'); next(); });\napp.get('/', (req, res) => { res.send('Hello World!'); });\n\nreq: The request object.\nres: The response object.\nnext: When called, executes the next middleware function in the stack. If not called, the request will not proceed further.\n\n //Types of Middleware\n\nDifferent types of Middleware in Express\n1. Application-Level Middleware\n2. Router-Level Middleware\n3. Error-Handling Middleware\n4. Built-in Middleware\n\n //Application-Level Middleware\n\nThese are bound to an instance of the Express application and are used across the entire app or specific routes.\napp.use((req, res, next)=>{ next(); });\napp.get('/', (req, res) => { res.send('Hello World!'); });\n\napp.use('/users',(req, res, next)=>{ next(); });\napp.get('/users', (req, res) => { res.send('Hello World!'); });\n\n2) Router-Level Middleware\n\nRouter-level middleware works similarly to application-level middleware.\nRouter object that can be used to create modular, mountable route handlers.\nIt is bound to an instance of express.router().\nThere are two ways to define routes using express.Router:\n1. Grouped Routes Using express.Router\n2. Chaining Route Methods\n\n //Grouped Routes Using express.Router\n\nconst express = require('express');\nconst router = express.Router();\nrouter.get('/user', (req, res) => { res.send('Get user'); });\nrouter.post('/user', (req, res) => { res.send('Create user'); });\nrouter.put('/user', (req, res) => { res.send('Update user'); });\nconst app = express();\napp.use('/', router);\napp.listen(3000, () => console.log('Server running on port 3000'));\n\n //Chaining Route Methods\n\nconst express = require('express');\nconst router = express.Router();\nrouter.route('/user')\n.get((req, res) => res.send('Get user'))\n.post((req, res) => res.send('Create user'))\n.put((req, res) => res.send('Update user'));\nconst app = express();\napp.use('/', router);\napp.listen(3000, () => console.log('Server running on port 3000'));\n\n3) //Error-Handling Middleware\n\n* It is a special kind of middleware that deals with errors.\n* It provides a built-in mechanism to catch and handle errors that occur during the request-response cycle.\nSyntax:\napp.use((err, req, res, next) => { // error handling logic });\nBasic\napp.use((err, req, res, next) => { console.error(err.stack); res.status(500).send('Something broke!'); });\n\nconst express = require('express');\nconst router = express.Router();\nrouter.get('/user', (req, res, next) => { try { throw new Error('Something went wrong while getting the user!'); res.send('Get user'); } catch (err) { next(err); } });\nconst app = express();\napp.use('/', router);\napp.use((err, req, res, next) => { console.error(err.stack); res.status(500).send({ message: err.message || 'Internal Server Error' }); });\napp.listen(4000, () => console.log('Server running on port 4000'));\n\n4) //Built-in Middleware\n\nExpress provides several built-in middleware functions that help handle common tasks like logging, parsing request bodies, handling errors, and more.\nCommonly used built-in middleware in Express.js:\n* express.static()\n* express.json()\n* express.text()\n* express.urlencoded()\n* express.raw()\n\n  //express.static\n\nThe express.static() middleware is used to serve static files.\nStatic files include images, CSS, JS files, fonts, and other assets.\nBy default, files are served at the root (/).\nBasic Usage\napp.use(express.static('public'));\nAny file inside the public directory will be automatically served.\nYou can access files directly by visiting http://localhost:3000/index.html\n\nServing Static Files from Multiple Directories\napp.use(express.static('public'));\napp.use(express.static('assets'));\nIf a file is not found in public/, it will look in assets/.\n\nServing Files Under /static Path\n\napp.use('/static', express.static('public'));\nhttp://localhost:3000/static/index.html\nhttp://localhost:3000/static/style.css\n\nRestricting Access to Specific Files\napp.use((req, res, next) => { if (req.url.startsWith('/static')) { return res.status(403).send('Access Forbidden'); } next(); });  //express.json\n* It is used to parse incoming JSON payloads in requests\n* It will make the data available in req.body.\n* When a client sends a POST or PUT request with JSON data, the request body is not automatically parsed\n* It’s extracts the JSON data and converts it into a JavaScript object accessible via req.body.\nconst express = require('express');\nconst app = express();\napp.use(express.json());\napp.post('/data', (req, res) => { console.log(req.body); res.send('JSON received successfully'); });\n\n//express.text\n* It is used to parse incoming requests where the body contains plain text (text/plain content type).\n* It converts the text body into a string and makes it available in req.body\n* Postman -> Go to Body → Select raw → Set Content-Type to text/plain\napp.use(express.text());\napp.post('/text', (req, res) => { console.log('Received Text:', req.body); res.send(`Text: ${req.body}`); });\n\n//express.urlencoded\n* When a client submits a form (<form> element in HTML), the data is sent in a URL-encoded format (application/x-www-form-urlencoded).\n* express.urlencoded() parses the encoded data and converts it into a JavaScript object accessible via req.body.\napp.use(express.urlencoded({ extended: true }));\napp.post('/submit', (req, res) => { console.log(req.body); res.send('Form data received'); });\nindex.html\n<form action='http://localhost:5500/submit' method='POST'>\n<input type='text' name='name'/>\n<button type='submit'>Submit</button>\n</form>\n\n//express.raw\n* It is used to parse raw request bodies into a buffer instead of converting them into a JavaScript object.\n* It is useful when dealing with binary data such as file uploads, images, or raw text that should not be parsed automatically.\n* Work with non-JSON, non-urlencoded data.\nconst express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\napp.use(express.raw({ type: 'image/*', limit: '5mb' }));\napp.post('/upload', (req, res) => { const filename = `image-${Date.now()}.jpg`; const filepath = path.join(__dirname, 'uploads', filename); fs.writeFile(filepath, req.body, (err) => { res.json({ message: 'Image uploaded successfully!' }); }); });"


       }
      },
         {
        "topicID":4,
      "head": " Ejs ",
      "title": " Ejs ",
       "notes": [
         {
          "type": "bullets",
          "list": [
"EJS (Embedded JavaScript)",
" EJS (Embedded JavaScript) is a templating engine for Node.js and Express.js",
"It allows to embed JavaScript into HTML",
" It helps to render dynamic HTML pages on the server by embedding JavaScript logic into templates. ",
" Instead of sending plain JSON responses, use a templating engine to generate structured HTML dynamically.",
"Why is required to use EJS?",
" Similar to HTML, with embedded JavaScript logic.",
" Use JavaScript inside <% %>.",
" Reuse common UI components like headers and footers.",
" No need for a front-end framework.",
"Install EJS with NPM.",
"npm install ejs"

          ]
        }
       ],
       "examples": {
        "title": " Ejs ",
        "Language": "Node",
"code":"// Create a Simple EJS Application\n1. Steps to integrate the ejs in express js\n2. Create View Folder\nInside the project folder, create views folder\n3. Create home page\nInside the views folder, create a file named home.ejs.\n4. Add HTML Document\n<h1>Welcome</h1>\n5. Create the Express Server\n6. Run the Application\n// node server.js\n\nCreate the Express Server\nconst express = require('express');\nconst app = express();\napp.set('view engine','ejs');\napp.get('/',(req,res)=>{ res.render('home'); });\napp.listen(3000,()=>{ console.log('Server running on http://localhost:3000'); });\n\n//: Basic ejs Syntax\n*<%- value %>* Outputs raw HTML (HTML to prevent XSS attacks).\n<p><%- '<strong>Welcome</strong>' %></p>\n*<%# comment %>* Comment in EJS (not shown in HTML output).\n<%# About section %>\n<% code %> Executes JavaScript code (like loops and conditions).\n<ul>\n<% for(let i=0;i<5;i++){ %>\n<li>Item <%= i+1 %></li>\n<% } %>\n</ul>\nUse <%= value %>\napp.set('view engine','ejs');\napp.get('/',(req,res)=>{ res.render('home',{ name:'ram' }); });\n// home.ejs\n<h1>Hello <%= name %></h1>\n\nIncluding Other Files\n<%- include('header') %>\n<p>Homepage!</p>\n<%- include('footer') %>\n\nDisplaying Dynamic Data from Express\napp.set('view engine','ejs');\napp.get('/',(req,res)=>{ res.render('home',{ name:'ram', items:['Menu1','Menu2'] }); });\n// home.ejs\n<h1>Hello <%= name %></h1>\n<ul>\n<% items.forEach(item=>{ %>\n<li><%= item %></li>\n<% }) %>\n</ul>\n\n//Creating a Form in EJS Handling Data in Express\nconst express = require('express');\nconst app = express();\napp.set('view engine','ejs');\napp.use(express.urlencoded({ extended:true }));\napp.get('/',(req,res)=>{ res.render('home'); });\napp.post('/submit',(req,res)=>{ const { name,email }=req.body; res.render('success',{ name,email }); });\n// home.ejs\n<form action='/submit' method='POST'>\n<label for='name'>Name:</label>\n<input type='text' id='name' name='name' required>\n<label for='email'>Email:</label>\n<input type='email' id='email' name='email' required>\n<button type='submit'>Submit</button>\n</form>\n// success.ejs\n<h2>Form Submitted Successfully!</h2>\n<p><strong>Name:</strong> <%= name %></p>\n<p><strong>Email:</strong> <%= email %></p>\n<a href='/'>Go Back</a>"


       }
      },
      {
  "topicID": 1,
      "head": "MonogDb",
      "title": "MonogDb",
  "notes": [
 

    {
      "type": "bullets",
      "list": [
        "--------------------->What is Database?-----------------------------------<",
        "A database is an organized collection of data",
        "It is stored and managed in digital format",
        "Used to store, retrieve, and manage information efficiently",
        "It allows users and applications to interact with the data in a structured and meaningful way"
      ]
    },
    {
      "type": "bullets",
      "list": [
         "---------------------> Relational Database Management System?-----------------------------------<",
        "Data Model (structured): Tabular data model with rows and columns",
        "Schema (fixed): The structure of the data must be defined in advance",
        "Scalability (vertically): Scaling up by adding more resources (CPU, RAM) to a single server",
        "Query Language: Uses SQL for defining and manipulating data",
        "Performance: Generally performs better with complex queries and transactions",
        "Examples: MySQL, Microsoft SQL Server, PostgreSQL, Oracle"
      ]
    },
    {
      "type": "bullets",
      "list": [
          "---------------------> NoSQL Database  ?-----------------------------------<",
        "Data Model (flexible):-- Supports document, key-value, column-family, or graph models",
        "Schema (schema-less):-- Allows data without predefined structure",
        "Scalability (horizontally):-- Scale out by adding more servers or nodes",
        "Query Language:-- Lacks a standard query language, often JSON-based",
        "Performance:-- Faster read/write operations in distributed systems",
        "Examples:-- MongoDB, DynamoDB, Cassandra, Redis"
      ]
    },
    {
      "type": "bullets",
      "list": [
          "--------------------->  What is MongoDB??<----------------------------------",
        "MongoDB is a popular NoSQL database",
        "Stores data in a flexible, JSON-like format called BSON (Binary JSON)",
        " MongoDB does not use tables or fixed schemas.",
         "---------------------> NoSQL-----------------------------------<",
       "MongoDB is a non-relational database",
 "It doesn't use structured tables and rows like SQL databases",
 " It stores data in documents"

      ]
    },
    {
      "type": "bullets",
      "list": [
         "--------------------->Databases and collections?-----------------------------------<",
        "In MongoDB, data is organized into databases and collections",
        "--------------------->Database:?-----------------------------------<",
        " A container for collections; a MongoDB instance can have multiple databases",
        "--------------------->Collection:-----------------------------------",
        " A group of MongoDB documents, similar to a relational table",
        "Collections don't enforce strict schema and can have different fields",
        "Collections don't enforce a strict schema.", 
       "Collection can have different fields (key-value pairs)."
      ]
    },
    {
      "type": "bullets",
      "list": [
          "--------------------->  Documents in MongoDB<---------------------------------",
        "MongoDB stores data as documents",
        "Documents are similar to JSON objects",
        "A document is a set of key-value pairs stored inside collections",
        "--------------------->  Document structure:-----------------------------------",
        " Keys are strings, values can be strings, numbers, arrays, or nested documents"
      ]
    }
  


  ]
      },
      {
       "topicID":2,
      "head": " Connect to MOngoDb  ",
      "title": " Connect to MOngoDb  ",
       "notes": [
        {
  "type": "bullets",
  "list": [
    "Create MongoDB Atlas Account:----> Go to MongoDB site → Try Atlas Free → Sign up (Google/email) → Accept terms → Redirected to Atlas Dashboard",
    "Create New Project:---> Dashboard → Projects dropdown → New Project → Enter project name → Next",
    "Set Up New Cluster:---> Choose cluster config, cloud provider, region, tier → Create Deployment",
    "Configure Cluster & Database Access:----> Security → Database Access → Add user (username, password) → Network Access → Whitelist IP",
    "Node.js Setup:----> mkdir project → npm init -y → npm install express dotenv (or express nodemon dotenv)",
    "Basic Server:----> const express=require('express'); const dotEnv=require('dotenv'); const app=express(); app.listen(3000,()=>console.log('Server running on http://localhost:3000'));",
    "Install MongoDB Package:----> npm install mongodb",
    ".env Setup:----> MONGODB_URL=mongodb+srv://username:password@cluster1.mongodb.net/?retryWrites=true&w=majority",
    "Connect to MongoDB:-----> const {MongoClient}=require('mongodb'); dotEnv.config(); const client=new MongoClient(process.env.MONGODB_URL); async function connectToDatabase(){try{await client.connect(); console.log('MongoDB connected');}catch(e){console.log('MongoDB connection failed',e);}}",
    "Start Server & Connect:----> app.listen(PORT,()=>{console.log(`Server started on port ${PORT}`); connectToDatabase();});"
  ]
}

       ]
         
    },
     {
        "topicID":3,
      "head": "  Crud Operations ",
      "title": "    Crud Operations ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": " Crud Operations ",
        "Language": "Node",
       "code":"//Insert Data in MongoDB\nconst express = require('express');\nconst dotEnv = require('dotenv');\nconst { MongoClient } = require('mongodb');\ndotEnv.config(); // Load environment variables from .env file\nconst app = express(); const PORT = 5001;\nconst client = new MongoClient(process.env.MONGODB_URL);\nasync function connectToDatabase() {\n try {\n   await client.connect();\n   console.log('MongoDB connected successfully');\n   const db = client.db('first-database');\n   const collection = db.collection('first-collection');\n   const insertResult = await collection.insertOne({name: 'Ram', age: 28});\n   console.log('Inserted document:', insertResult);\n } catch (error) {\n   console.log('MongoDB connection failed:', error);\n }\n}\n\n //Updating Documents in MongoDB\n1. Using Update Operators\n$set: Updates or adds a field.\n$unset: Removes a field from the document.\n$inc: Increments a field's value.\n$push: Adds an item to an Array.\n$pull: Removes an Item from an Array\nExample: collection.updateOne({ 'name': 'Ram' }, { $set: { 'grade': 'First' } })\n\n2. //Update a Single Document\nSyntax: collection.updateOne({ <filter> }, { $set: { <field>: <value> } })\nExample: const db = client.db('first-database'); const collection = db.collection('first-collection'); collection.updateOne({ 'name': 'Ram' }, { $set: { 'name': 'RamKumar' } })\n\n3.// Update Multiple Documents\nSyntax: collection.updateMany({ <filter> }, { $set: { <field>: <value>, <field>: <value> } })\nExample: const db = client.db('first-database'); const collection = db.collection('first-collection'); collection.updateMany({ 'name': 'Ramm' }, { $set: { 'name': 'Ramm' } })\n\n4.// Replace a Document\nSyntax: db.collection.replaceOne({ <filter> }, { <newDocument> })\nExample: collection.replaceOne({ 'name': 'Ramm' }, { 'name': 'Ram', 'age': 20, 'DOB': '06/07/2000', 'marks': [50, 60, 80] })\n\n  //Deleting Documents in MongoDB\n  //Delete a Single Document: Syntax \ncollection.deleteOne({ <filter> }) Example collection.deleteOne({ 'name': 'Hanuman' })\n //Delete Multiple Documents: Syntax collection.deleteMany({ <filter> }) Example collection.deleteMany({ 'name': 'Hanuman' })\n //Delete All Documents in a Collection: Syntax collection.deleteMany({}) Example collection.deleteMany({})\n  //Drop a Collection: Syntax collection.drop() Example collection.drop()"
       }
      },
       {
        "topicID":3,
      "head": " Querying Data in MongoDB  ",
      "title": "Querying Data in MongoDB ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "connect to MongoDB using Mongoose ",
        "Language": "Node",
        "code":"Querying Data in MongoDB\nQuerying in MongoDB involves retrieving data from your collections using various filters and conditions.\nFind All Documents:\nThe find() method retrieves all documents from a collection.\nSyntax: collection.find({})\nExample: users.find({})\nconst query = {age: { $gt: 28 }}; // no filter\nconst options = {\n projection: { _id: 0, name: 1, age: 1 },// Optional: Which fields to return\n // sort: { age: -1 }, // Optional: descending order\n // limit: 5, // Optional\n};\nconst documents = await collection.find(query, options).toArray();\nconsole.log('Documents found:', documents);\n\nOperators\nComparison Operators\n$eq: Equal to\n$ne: Not equal to\n$gt: Greater than\n$gte: Greater than or equal to\n$lt: Less than\n$lte: Less than or equal to\n\nLogical Operators\n$and\n$or\n$not\n$nor\n\n$eq (Equal to): Finds documents where a field is equal to a specified value.\n{ age: { $eq: 25 } }\n\n$ne (Not equal to): Finds documents where a field is not equal to a specified value.\n{ age: { $ne: 25 } }\n\n$gt (Greater than): Finds documents where a field is greater than a specified value.\n{ age: { $gt: 25 } }\n\n$gte (Greater than or equal to): Finds documents where a field is greater than or equal to a specified value.\n{ age: { $gte: 25 } }\n\n$lt (Less than): Finds documents where a field is less than a specified value.\n{ age: { $lt: 25 } }\n\n$lte (Less than or equal to): Finds documents where a field is less than or equal to a specified value.\n{ age: { $lte: 25 } }\n\n$and: Joins query clauses with a logical AND.\n{ $and: [{ age: { $gt: 20 } }, { age: { $lt: 30 } }] }\n\n$or: Joins query clauses with a logical OR.\n{ $or: [{ name: 'Ram' }] }\n\n$not: Inverts the effect of a query expression.\n{ age: { $not: { $gte: 30 } } }\n\n$nor: Joins query clauses with a logical NOR.\n{ $nor: [{ age: { $gt: 30 } }, { name: 'Ram' }] }"
        }
      },
      {
        "topicID":3,
      "head": " connect to MongoDB using Mongoose  ",
      "title": "connect to MongoDB using Mongoose ",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "connect to MongoDB using Mongoose",
        "Language": "Node",
  "code": "connect to MongoDB using Mongoose\n1. Set Up and Create a MongoDB connection URI in .env file\nMONGODB_URL=mongodb+srv://vinodh:[password]@cluster1.3yqqn.mongodb.net/[databasename]?retryWrites=true\n2. Script in your server file\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst dotEnv = require(\"dotenv\");\nconst app = express();\napp.use(express.json());\ndotEnv.config();\nmongoose.connect(`${process.env.MONGO_URL}`, {\n   useNewUrlParser: true,\n   useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB Connected\"))\n .catch(err => console.error(err));\napp.listen(3000, () => console.log(\"Server running on port 3000\"));\n\n// Define a Schema\nconst userSchema = new mongoose.Schema({\n   name: String,\n   age: Number\n});\n// Create a Model\nconst User = mongoose.model(\"users\", userSchema);\n\n// Insert Data\nconst newUser = new User({ name: \"John\", age: 30 });\nnewUser.save()\n   .then(() => console.log(\"User Saved\"))\n   .catch(err => console.error(err));\n\n// Postman adds data using Mongoose\napp.post(\"/submit\",async (req, res)=>{\n   const newUser = new User(req.body);\n   await newUser.save()\n   res.status(201).json({ message: \"User Saved\", user: newUser });\n})\napp.get(\"/users\", async (req, res) => {\n   const users = await User.find();\n   res.send(users);\n});"
}
      },
      {
        "topicID":3,
      "head": "Create Application Architecture ",
      "title": "Create Application Architecture",
       "notes": [
         {
          "type": "bullets",
          "list": [
          ]
        }
       ],
       "examples": {
        "title": "Create Application Architecture",
         "Language": "Node",
        "code":"// Create Application Architecture\n\n1. models/userModel.js\nconst mongoose = require('mongoose')\nconst userSchema= new mongoose.Schema({\n   name: String,\n   age: Number\n})\nconst userModel =  mongoose.model('users', userSchema)\nmodule.exports = userModel;\n\n2. controller/userController.js\nconst express = require('express')\nconst userRoutes = express.Router();\nconst userModel = require('../models/users')\nconst getAllUsers =('/',async (req, res)=>{\n   const results = await userModel.find();\n   res.send(results)\n})\nconst createUser =('/',async (req, res)=>{\n   const singleUser = new userModel(req.body)\n   const newrecord = await singleUser.save();\n   res.status(201).send(newrecord)\n})\nconst updateUser =('/:id',async (req, res)=>{\n   const {id} = req.params;\n   const existingUser = await userModel.findById(id)\n   existingUser.age = req.body.age\n   const newrecord = await existingUser.save();\n   res.status(200).json({ message: 'User updated successfully', newrecord });\n})\nconst deleteUser =('/:id',async (req, res)=>{\n   const {id} = req.params;\n   const deletedUser = await userModel.findByIdAndDelete(id)\n   res.status(200).json({ message: 'User deleted successfully', deletedUser });\n})\nmodule.exports = { getAllUsers, createUser, updateUser, deleteUser };\n\n3. routes/userRoutes.js\nconst express = require('express');\nconst { getAllUsers, createUser, updateUser, deleteUser } = require('../controllers/users');\nconst userRoutes = express.Router();\nuserRoutes.get('/', getAllUsers);\nuserRoutes.post('/', createUser);\nuserRoutes.put('/:id', updateUser);\nuserRoutes.delete('/:id', deleteUser);\nmodule.exports = userRoutes;\n\n4. server.js\nconst express = require('express')\nconst app = express()\nconst mongoose = require('mongoose')\nconst dotenv = require('dotenv')\ndotenv.config();\nconst userRoutes = require('./routes/users')\napp.use(express.json())\napp.use('/users',userRoutes)\nconst connectDB=async()=>{\n   await mongoose.connect(process.env.MONGO_URL)\n   .then(()=>console.log('DB connected'))\n   .catch((err)=>console.log(err))\n}\napp.listen(3000, ()=>{\n   console.log('Server is running')\n   connectDB();\n})"
}
      }
  ]
}
