{
  "topic": "ReatJs",
  "concepts": [
    {
      "topicID": 1,
      "head": "React JS",
      "title": "React Intro",
      "notes": [
        {
          "type": "bullets",
          "list": [
          "React is a popular JavaScript library", 
          "Used for building front end web applications", 
          "Using React we can create Single Page Applications (SPA)",
          "React is in the view layer of the MVC architecture",
          "Developed by Facebook",
          "Released to the public in 2013",
          "Famous for implementing a virtual dom"
          ]
        }
       
      ]
    },

    {
      "topicID": 3,
      "head": "Fragment <>",
      "title": "Fragment <>",
      "notes": [
        {
          "type": "bullets",
          "list": [
           "In React, a Fragment is an empty React element ",
           "It is a container",
           "It allows you to group other elements without adding an additional wrapper node to the DOM. ",
           "It’s useful when you need to return multiple elements from a React component."

          ]
        }
      ],
      "examples": {
        "title": "Fragment Examples",
        "Language": "react",
        "code":"import React from 'react';\n export default function Home() {\n return (\n<>\n Home\n </>\n );\n }"
      }
    },
     {
      "topicID": 4,
      "head": "Webpack",
      "title": "Webpack",
      "notes": [
        {
          "type": "bullets",
          "list": [
           
 "Webpack is a module bundler",
"It bundles several pieces of your application and creates static files which can be served via a static server.",
 "It takes the code (including CSS, HTML, and assets like images) and produces a bundle or bundles that are optimized for loading in the browser" 
          ]
        }
      ]

    },
    {
      "topicID": 5,
      "head": "Virtual DOM",
      "title": "Virtual DOM",
      "notes": [
        {
          "type": "numbers",
          "list": [
            "It acts as a lightweight replica of the real DOM",
             "It doesn't directly manipulate the document's layout",
          " Allows faster manipulation than real DOM.",
   "Changes synchronized efficiently with real DOM.",
     " Enhances performance and user experience in web apps."
          ]
        }
      ]
     
    },
    {
      "topicID": 6,
      "head": "Babel",
      "title": "Babel",
      "notes": [
        {
          "type": "numbers",
          "list": [
            
 "Babel is a JavaScript compiler .",
 "It is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of javascript",
 "ECMA stands for “European Computer Manufacturers Association”",
 "It ensures compatibility with current and older browsers or environments by transpiling modern JavaScript features.",
 "When we create a react app, then babel is automatically included in our react app."
          ]
        }
      ]
     
    },
     {
      "topicID": 7,
      "head": "JSX in React",
      "title": "JSX in React",
      "notes": [
        {
          "type": "numbers",
          "list": [
            
" JSX stands for JavaScript XML .",
"It is a syntax extension for JavaScript used in React.js .",
"JSX allows developers to write HTML-like code within JavaScript .",
 "This XML-like syntax is transpiled into regular JavaScript function calls by the React framework.",
 "While JSX is not mandatory in React, it's highly recommended for its readability and maintainability benefits."
     ]
        }
      ],
       "examples": {
        "title": "JSX in React Examples",
        "Language": "react",
        "code":"> //Inline Styles: \n  <h1 style={{color:'red'}}>Welcome</h1>\n //-> Inline styles written as objects: \n  const divStyle = { \n color: 'blue',\n };\n <h1 style={divStyle}>Welcome</h1> \n //-> CSS Modules:\n  import styles from './styles.module.css';\n <h1 className={styles.title}>Welcome</h1>\n // styles.module.css\n .title {\n color: blue;\n }"
      }
     
    },
    {
      "topicID": 8,
      "head": "React Components",
      "title": "React Components",
      "notes": [
        {
          "type": "numbers",
          "list": [         
 "React components are the building blocks of a React application.",
"They enable you to break down complex UIs into smaller, reusable, and manageable pieces.",
"React components can be classified into two types :" ,
 "1)Functional components",
" 2)Class components"
 ]
        },
        {
          "type": "subsection",
          "subhead": "Types of components",
          "points": [
            {
              "tagName": "Functional components",
              "description": "Introduction of React Hooks in version 16.8, now ability to use state and other features in functional components."
            },
            {
              "description": "A React functional component:"
            },
             {
              "description": " is a JavaScript/ES6 function."
            },
             {
              "description": "must return a React element.."
            },
             {
              "description": "can take props as parameters if necessary."
            },
            {
              "description": "* rfc/rsc  is VSCODE shortcut"
            }
            
          ]
        },
        {
          "type": "subsection",
          "subhead": "Class component:",
          "points": [
            {
              "tagName": "Functional components",
              "description": "is an ES6 class, will be component once it ‘extends’ React component."
            },
            {
              "description": "can accept props (in the constructor) if needed"
            },
             {
              "description": "can maintain its own data with state"
            },
             {
              "description": "must have a render() method which returns a React element (JSX), or null."
            },
             {
              "description": "They are more complex than functional components including constructors, life-cycle methods, render() functions and state(data) management."
            },
            {
              "description": "*  rcc  is VSCODE shortcut"
            }
            
          ]
        }


      ]
    },
      {
      "topicID": 9,
      "head": "Props",
      "title": "Props",
      "notes": [
        {
          "type": "numbers",
          "list": [
 "Prop is an Object ",
 "Props is a special keyword in React, representing properties",
 "Fundamental mechanism for passing data from parent components to child components.", 
 "Data with props flows in a uni-directional manner.",
 "Props data is read-only , which means that child components should not modify data received from parents.",
 "Prop Drilling passing data through multiple layers of components  "
   ]
        }
      ],
      "examples": {
        "title": "Props Examples",
        "Language": "react",
        "code":"//->Program 1\nchild\n/////\nconst Welcome=(props)=>{\n return (\n  <h1>Welcome {props.name}</h1>\n );\n}\n//parent\nexport default function App() {\n return (\n  <Welcome name=\"Ram\" />\n );\n}\n\n//->Program 2\nconst Welcome=({name})=>{\n return (\n  <h1>Welcome {name}</h1>\n );\n}\nexport default function App(){\n return (\n  <Welcome name=\"Ram\" />\n );\n}\n\n//->Program 3 - Default Props\nconst Welcome=({name='Raj'})=>{\n return (\n  <h1>Welcome {name}</h1>\n );\n}\n\n//->Program 4\nconst userObj = {\n name: 'Ram',\n age: 25,\n};\nfunction Profile({ user }) {\n return (\n  <div>\n   <h2>{user.name}</h2>\n   <p>Age: {user.age}</p>\n  </div>\n );\n}\nfunction App() {\n return (\n  <div>\n   <Profile user={userObj} />\n  </div>\n );\n}\n\n//->Program 5 - Children props\nfunction Card({ title, children }) {\n return (\n  <div className=\"card\">\n   <h2>{title}</h2>\n   <div>{children}</div>\n  </div>\n );\n}\nfunction App() {\n return (\n  <div>\n   <Card title=\"Card Title\">\n    <p>This is some content inside the card.</p>\n   </Card>\n  </div>\n );\n}\n"

      }
     
    },
     {
      "topicID": 10,
      "head": "state",
      "title": "state",
      "notes": [
        {
          "type": "numbers",
          "list": [
 " State is a special object in React",
" State is used to manage dynamic data within a component",
" State is private to the component and can change over time",
" It cannot be accessed from outside of that component.",
" State can be passed down to child components via props.",
" Overusing state can lead to performance issues",
"Key Concepts of State in React",
"State Management: It holds information that influences the rendering of a component.",
"State Updates: State changes can trigger re-renders of the component, allowing the UI to update in response to user actions or other events.",
"Local Scope: State is local to the component where it is defined but can be passed down as props to child components."
 ]
        }
      ],
      "examples": {
        "title": "state Examples",
        "Language": "react",
        "code":"1. Import useState from React\nimport React, { useState } from 'react';\n\n//2. Declare State Variables\nconst [count, setCount] = useState(0); // setter function\ncount: State variable initialized to 0.\nsetCount: Function to update count. (set + Count)\n\n//3. Update State\nconst increment = () => {\n setCount(count+1);\n}\nsetCount: Updates count by incrementing it.\n\nimport React, { useState } from 'react';\n// Declare State Variables\nconst [count, setCount] = useState(0);\n// Update State\nconst increment = () => {\n setCount(count+1);\n}\n\n->Program1\n\nimport React, { useState } from 'react';\nfunction Counter() {\n const [count, setCount] = useState(0);\n return (\n  <div>\n   <p>Count: {count}</p>\n   <button onClick={() => setCount(count + 1)}>Increment</button>\n   <button onClick={() => setCount(count - 1)}>Decrement</button>\n   <button onClick={() => setCount(0)}>Reset</button>\n  </div>\n );\n}\nexport default Counter;\n"

      }
     
    },
     {
      "topicID": 11,
      "head": "Lists",
      "title": "Lists",
      "notes": [
        {
          "type": "numbers",
          "list": [

"In React, you can render lists by using JavaScript’s map() function to transform an array into a list of elements"

   ]
        }
      ],
       "examples": {
        "title": " lists",
        "Language": "react",
        "code":"const weekDays = ['Sunday', 'Monday', 'Tuesday'];\n const listOfItems = weekDays.map((item) => \n <li key={item}>{item}</li> \n );\n return (\n <ul {listOfItems}</ul>\n );"
      }
     
    },
    {
      "topicID": 12,
      "head": "Keys",
      "title": "Keys",
      "notes": [
        {
          "type": "numbers",
          "list": [
 " Keys are unique identifiers for each item in the list.",
" It help React identify which items have changed, been added, or removed.",
" If your data has unique IDs, use those as keys.",
"Best Practices for Using Keys",
"Use Unique IDs : Use a unique identifier from your data, such as a database ID or a unique field.",
"Avoid Using Index as Key : Using array indices as keys is discouraged because it can lead to issues with state and performance when the list order changes or items are added/removed."

     
 ]
        }
      ],
      "examples": {
        "title": " Keys",
        "Language": "react",
        "code":"const users = [\n { id: 1, name: \"John\"}, \n { id: 2, name: \"Mike\"},\n { id: 3, name: \"Nice\" }\n];\nconst userListItems = users.map((user) =>\n <li key={user.id}>{user.name}</li>\n);\n"

      }
     
    },
     {
      "topicID": 13,
      "head": "Routing",
      "title": "Routing",
      "notes": [
        {
          "type": "numbers",
          "list": [
" Routing allows you to manage the navigation between different views or pages within your app without having to reload the entire page",
" React Routing is essential for building Single Page Applications (SPAs), allowing you to navigate between different parts of your app without reloading the page." ,
" React Router is the standard library used for routing and navigation in React applications." 
     
 ]
        },
         
        {
          "type": "subsection",
          "subhead": "Basic Components",
          "points": [
            {
              "tagName": "BrowserRouter",
              "description": "A wrapper for your app, managing the history API."
            },
            
            {
              "tagName": "Routes",
              "description": "A container for route definitions."
            },
            {
              "tagName": "Route",
              "description": "Declares a single route and its component."
            },
             {
              "tagName": "Link",
              "description": "Provides navigation links in the app"
            },
            {
              "tagName": "useNavigate",
              "description": " Use the useNavigate hook to navigate programmatically within your components."
            }
          ]
        }
      ],
       "examples": {
        "title": " Keys",
        "Language": "react",
"code":"1) Import components from react-router-dom\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n2) Create Router\nreturn (\n <BrowserRouter>\n  <nav>\n   <a to=\"/\">Home</a> |\n   <a to=\"/about\">About</a>\n  </nav>\n  <Routes>\n   <Route path=\"/\" element={<Home />} />\n   <Route path=\"/about\" element={<About />} />\n  </Routes>\n </BrowserRouter>\n);\n\n3) Create Components : Create Home and About components\n\n1. Create Router\nreturn (\n <BrowserRouter>\n  <Routes>\n   <Route path=\"/\" element={<Home />} />\n   <Route path=\"/user/:id\" element={<User />} />\n  </Routes>\n </BrowserRouter>\n);\n\n2. Extract route parameters using useParams:\n\n2.1) Import useParams from react-router-dom\nimport { useParams } from 'react-router-dom';\n\n2.2) Access parameter\nfunction User() {\n let { id } = useParams();\n return <h2>User ID: {id}</h2>;\n}\n\nLink Component\n\nreturn (\n <nav>\n  <Link to=\"/\">Home</Link>\n  <Link to=\"/about\">About</Link>\n  <Link to=\"/contact\">Contact</Link>\n </nav>\n);\n"

      }
    },
     {
      "topicID":14,
      "head": "React Hooks ",
      "title": " React Hooks",
      "notes": [
        {
          "type": "numbers",
          "list": [
" React hooks are functions",
"It allow you to use React state and lifecycle features in functional components",
" Hooks are introduced in React version 16.8 (2019)",
" Allow you to reuse stateful logic",
"It allow you to use React features without having to write a class." 
 
     
 ]
        }
      ]
     
    },
     {
      "topicID": 15,
      "head": "useState",
      "title": " useState",
      "notes": [
        {
          "type": "numbers",
          "list": [
"Allows you to manage component state within a functional component."

 ]
        }
      ],
      "examples": {
        "title": " useState",
        "Language": "react",
        "code":"import React, { useState } from 'react';\n const App = () => {\n const [count, setCount] = useState(0);\n return (\n<div>\n<p>Count: {count}</p>\n <button onClick={() => setCount(count + 1)Increment</button>\n </div>\n );\n };\n export default App;"
      }
     
    },
     {
      "topicID": 16,
      "head": "useEffect",
      "title": " useEffect",
      "notes": [
        {
          "type": "numbers",
          "list": [
"Handles side effects (e.g., data fetching, DOM manipulation, subscriptions) in functional components.",
" It takes two arguments: a function to run and an optional array of dependencies.",
" If the array is empty, the effect runs only once after the initial render.",
"If the array contains variables, the effect runs whenever those variables change.",
"If no array is provided, the effect runs after every render.",
" It can return a cleanup function to clean up resources when the component unmounts or before the effect runs again."

 ]
        }
      ],
       "examples": {
        "title": " useEffect",
        "Language": "react",
        "code":"// useEffect Update Scenarios\n //1. No Dependency Array: The effect runs after every render, mimicking a continuous update mechanism.\n useEffect(()=>{\n document.title = “Welcome”;\n });\n //2. Empty Dependency Array: This configuration essentially turns off the update phase for this effect. This effect runs only once.\n useEffect(()=>{\n document.title = “Welcome”;\n },[]);\n //3. Specified Dependencies: The effect runs on mount and then on every update where the specified dependencies have changed.\n  useEffect(()=>{\n document.title = “Welcome”;\n },[dependancy1, dependency2]);\n const [count, setCount] = useState(0);\n const [name, setName] = useState('');\n useEffect(()=>{\n document.title = Count: ${count};\n }, [count])\n return (\n <div>\n <p>Count: {count}</p>\n <button onClick={() => setCount(count + 1)}>Increment</button>\n <input type='text' value={name} onChange={e => setName(e.target.value)} />\n </div>\n );\n"
      }
     
    },
     {
      "topicID": 17,
      "head": "useRef",
      "title": " useRef",
      "notes": [
        {
          "type": "numbers",
          "list": [
" It used for accessing DOM elements directly within functional components",
" It can be used to store a mutable value that does not cause a re-render when updated.",
"const inputRef = useRef(null);"
 ]
        }
      ],
       "examples": {
        "title": " useRef",
        "Language": "react",
        "code":"const inputRef = useRef(null);\nconst focusInput = () => {\ninputRef.current.focus();\ninputRef.current.style.backgroundColor = ‘red’;\n};\nreturn (\n<div>\n<input ref={inputRef} />\n <button onClick={focusInput}>Focus Input</button>\n </div>)\n"

      }
     
    },
      {
      "topicID": 18,
      "head": "useContext",
      "title": " useContext",
      "notes": [
        {
          "type": "numbers",
          "list": [
"Context provides you to manage global state and share data across components without the need for prop drilling.",
"Accesses context values (e.g., theme, user authentication) within components.",
"Steps to create and use useContext",
" Create Context",
"create a context using the createContext method.",
"This context will hold the shared state."

 ]
        }
      ],
      "examples": {
        "title": " useContext",
        "Language": "react",
        "code":"import React, { createContext, useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport Menu from './Menu';\nimport About from './About';\nimport Contact from './Contact';\nimport User from './User';\nimport Home from './Home';\n\nexport const myContext = createContext();\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []); // ✅ add dependency array so it runs once\n\n  const loadUsers = async () => {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await response.json();\n    setUsers(data);\n  };\n\n  return (\n    <myContext.Provider value={{ users, todos, setTodos }}>\n      <Menu />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/contact\" element={<Contact />} />\n        <Route path=\"/user/:id\" element={<User />} />\n      </Routes>\n    </myContext.Provider>\n  );\n}\n\nexport default App;\n"
      }
     
    },
    {
      "topicID": 19,
      "head": "useReducer",
      "title": " useReducer",
      "notes": [
        {
          "type": "numbers",
          "list": [
" useReducer is used for state management",
" It is an alternative to useState() for managing more complex state logic.",
" state: The current state value.",
"dispatch: A function used to dispatch an action to the reducer function.",
" reducer:  A function that specifies how the state should be updated based on the action dispatched.",
"initialState: The initial state value."

 ]
        }
      ],
       "examples": {
        "title": " useReducer",
        "Language": "react",
        "code":"//->Steps to create and use useReducer\n\n//1. Define Initial State\nconst initialState = { count: 0 };\n\n//2. Create Reducer Function\nconst reducer = (state, action) => {\n switch (action) {\n case 'INCREMENT':\n return {...state, count:state.count+1};\n case 'DECREMENT':\n return {...state, count:state.count-1};\n default:\n return state;\n } };\n\n//3. Use useReducer Hook\nconst [state, dispatch] =  useReducer(reducer, initialState);\n\n//4. Dispatch Actions\n{state.count}\n <button onClick={()=>dispatch('INCREMENT')}>Increment</button>\n<button onClick={()=>dispatch('DECREMENT')}>Decrement</button>\n\n//->program\ninitialState.js\nexport const initialState = { \n count: 0,\n score: 0 \n }\n\n//reducer.js\nexport const reducer =(state, action)=>{\n switch(action){\n case 'INC':\n return {...state, count:state.count+1};\n case 'DEC':\n return {...state, count:state.count-1};\n case 'INCScore':\n return {...state, score:state.score+1}\n default:\n  return state;\n }\n }\n\n//App.js\nimport React, { useReducer } from 'react';\nimport { initialState } from './initialState';\nimport { reducer } from './reducer';\nexport default function App() {\n const [state, dispatch] = useReducer(reducer,initialState)\n return (\n <div>\n {state.count} \n <button onClick={e=>dispatch('INC')}>+</button>\n <button onClick={e=>dispatch('DEC')}>-</button><br/>\n {state.score}\n <button onClick={e=>dispatch('INCScore')} >+ 1 (Score)</button>\n </div>\n );\n }"

      }
     
    },
    {
      "topicID": 20,
      "head": "Redux",
      "title": " Redux",
      "notes": [
        {
          "type": "numbers",
          "list": [
" Redux is a state management library for JavaScript applications.",
" It provides a predictable way to manage data  across  the component . ",
" Centralized state for easy debugging.",
 "Install Redux and React-Redux via npm",
"npm install react-redux @reduxjs/toolkit",
"----->Step-by-step procedure (Create a file store/index.js)",
" Initial state",
" Create Reducer Functions" ,
" Configure Store",
" Wrap App.jsx in Provider",
" Using Redux in Component",
" Access to the dispatch function "

 ]
 
        }
      ],
      "examples": {
        "title": " Redux",
        "Language": "react",
 "code":"//1) Initial state\n\tconst initialState = { count: 0 };\n\n//2) Create Reducer function (Pure Functions That Update State)\nconst counterReducer = (state = initialState , action) => {\n switch (action.type) {\n case 'INCREMENT':\n  return { ...state, count: state.count + 1 };\n default:\n  return state;\n }\n };\n\n//3) Create Store\nexport const store = configureStore({\n reducer: counterReducer,\n });\n\n//4) Wrap main.jsx in Provider\nimport { Provider } from 'react-redux';\nimport store from './store.js';\ncreateRoot(document.getElementById('root')).render(\n <Provider store={store}>\n <App />\n </Provider>,\n)\n\n//5) Using Redux in Component\nimport { useSelector, useDispatch } from 'react-redux';\nconst count = useSelector((state) => state.count); //Get state\nconst dispatch = useDispatch(); // Initialize dispatch\n\n//6) Access to the dispatch function\n<h1>Count: {count}</h1>\n<button onClick={() => dispatch({type:'INCREMENT'})}>+</button>\n\n//Sample Program1:\n\n//initialState.jsx\nexport const initialState = { count: 0, user:0 };\n\n//counterReducer.jsx\nimport { initialState } from \"./initialState\";\nexport const counterReducer = (state = initialState, action) => {\n switch (action.type) {\n case 'INCREMENT':\n  return { ...state, count: state.count + 1 };\n case 'DECREMENT':\n  return { ...state, count: state.count - 1 };\n default:\n  return state;\n }\n};\n\n//store/index.jsx\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { counterReducer } from \"./counterReducer\";\nexport const store = configureStore({\n reducer: counterReducer,\n});\n\n//main.jsx\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\ncreateRoot(document.getElementById('root')).render(\n <Provider store={store}>\n  <App />\n </Provider>,\n);\n\n//App.jsx\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nexport default function App() {\n const counter = useSelector(state => state.count);\n const dispatch = useDispatch();\n return (\n  <div>\n   <span>{counter}</span>\n   <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n   <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n  </div>\n );\n}"

      }
     
    },
     {
      "topicID": 21,
      "head": "Zustand",
      "title": " Zustand",
      "notes": [
        {
          "type": "numbers",
          "list": [
" Zustand is a minimalist state management library for React.",
" It's fast, simple, and scalable without needing context providers or boilerplate. ",
" We can access Zustand store values and functions outside of React components",

"Install Zustand via npm",
"npm install zustand",

"----------->Step-by-step procedure (Create a file store/index.js)",
" Create Zustand Store",
" Create store value",
" Access Store Values in a Component",
" Create functions in the store",
" Access store Functions in Component",
" Access Store Outside Components",
" Set State Outside Components"
 ]
 
        }
      ],
      "examples": {
        "title": " Redux",
        "Language": "react",
"code": "//1) Create Zustand Store\nimport { create } from \"zustand\"\nconst useCounterStore = create((set)=>({\n  \n}))\nexport default useCounterStore\n\n//2) Create store value\ncount:0,\n\n//3) Access Store Values in a Component\nimport useCounterStore from './store/useCounterStore';\nconst count = useCounterStore(state=>state.count)\n\n//4) Create functions in the store\nincrease: () => {\n   set((state)=>({count:state.count+1}))\n}\n\n//5) Access store Functions in Component\nimport useCounterStore from './store/useCounterStore';\nconst increase = useCounterStore(state=>state.increase)\n\n//: Sample Program\n//store/useCounter.jsx\nimport { create } from 'zustand'\nexport const useCounter = create((set) => ({\n  count: 1,\n  inc: () => set((state) => ({ count: state.count + 1 })),\n  dec: () => set((state) => ({ count: state.count - 1 })),\n}))\n\n//App.jsx\nimport React from 'react';\nimport { useCounter } from './store/useCounter';\nexport default function App() {\n  const { count, inc, dec } = useCounter()\n  return (\n    <div>\n       <span>{count}</span>\n      <button onClick={inc}>up</button>\n      <button onClick={dec}>down</button>\n    </div>\n  );\n}"
      }
     
    },
     {
      "topicID": 22,
      "head": "useCallback",
      "title": " useCallback",
      "notes": [
        {
          "type": "numbers",
          "list": [
" useCallback is used to memoize functions.",
" It helps optimize performance by preventing unnecessary re-creations of functions.",
" The memoized function is returned unless its dependencies change.",
" When passing functions as Props use useCallback"
 ]
 
        }
      ],
       "examples": {
        "title": " useCallback",
        "Language": "react",
        "code": "// These functions are recreated on every render\n const handleCount= ()=>{\n setCount(count+1);\n }\n const handleSalary=()=>{\n setSalary(salary+1);\n }\n const handleCount= useCallback (()=>{\n setCount(prevState=>prevState+1);\n },[])\n // No dependencies, so this function will not be recreated on re-renders\n const handleSalary= useCallback (()=>{\n setSalary(prevState=>prevState+1);\n },[])\n // No dependencies, so this function will not be recreated on re-renders\n\n--> Program\n\n-->App.js\n\nimport React, { useCallback , useState } from 'react';\nimport CustomButton from './CustomButton';\nexport default function App() {\n const [count, setCount] = useState(0);\n const [student, setStudent] = useState(0);\n const handleCount = useCallback (() => {\n  setCount((prevCount) => prevCount + 1);\n }, []);\n const handleStudent = useCallback (() => {\n  setStudent((prevCount) => prevCount + 1);\n }, []);\n return (\n  <div>\n   Count : {count}\n   <CustomButton onClick={handleCount}>\n    increment\n   </CustomButton>\n   <br/>Student : {student}\n   <CustomButton onClick={handleStudent}>\n    increment\n   </CustomButton>\n  </div>\n );\n}\n\n-->CustomButton.js\n\nimport React, { memo } from 'react';\nconst CustomButton = ({ onClick, children }) => {\n console.log(`Rendering button: ${children}`);\n return <button onClick={onClick}>{children}</button>;\n}\nexport default memo(CustomButton)\n"

      }
     
    },
     {
      "topicID": 23,
      "head": "useMemo",
      "title": " useMemo",
      "notes": [
        {
          "type": "numbers",
          "list": [
" useMemo memoizes (caches) the result of a function.",
" It's used to optimize performance by avoiding expensive calculations on every render.",
" React will only recompute the memoized value when one of the dependencies has changed. This optimization helps avoid expensive calculations on every render if the inputs haven't changed."

 ]
 
        }
      ],
      "examples": {
        "title": " useCallback",
        "Language": "react",
        "code": "//Without useMemo\nconst isEven=()=>{\n return counterOne % 2 === 0;\n};\n<span>\n {isEven() ? 'Even' : 'Odd'}\n</span>\n\n-->Using useMemo\n\nconst isEven = useMemo(() => {\n let i=0; // created some delay\n while (i<2000000000) i++;\n return counterOne % 2 === 0;\n}, [counterOne]);\n<span>\n {isEven ? 'Even' : 'Odd'}\n</span>\n"


      }
     
    },
     {
      "topicID": 24,
      "head": "Functional Component LifeCycle",
      "title": " Functional Component LifeCycle",
      "notes": [
        {
          "type": "numbers",
          "list": [
"In React, the component lifecycle is divided into three main phases:",
"Initial Render or Mounting Phase",
"The mounting phase is when a component is created and inserted into the DOM.",
" Updating Phase",
"The updating phase occurs when the component's state or props change, leading to a re-render.",
" Un-Mounting Phase",
"The un-mounting phase is when a component is removed from the DOM."

]
        }
      ]
     
    },
      {
      "topicID": 25,
      "head": "Forms",
      "title": "Forms",
      "notes": [
        {
          "type": "numbers",
          "list": [
" Forms in React are similar to HTML forms",
" It require more explicit handling for state and input management",
" Forms usually consist of inputs (text, select, radio, etc.), a submit button, and may handle events such as onChange, onSubmit, etc"

]
 
        },
         {
          "type": "subsection",
          "subhead": "Two types of components",
          "points": [
            {
              "tagName": "",
              "description": "Controlled Components"
            },
            {
              "tagName": "",
              "description": "UnControlled Components"
            }
            
          ]
        },
        {
          "type": "subsection",
          "subhead": "Controlled Components",
          "points": [
            {
              "tagName": "",
              "description": "A controlled component is an input element whose value is controlled by the React state."
            },
            {
              "tagName": "",
              "description": "React component renders the input  also controls the value of the input"
            },
            {
              "tagName": "",
              "description": "React component renders the input  also controls the value of the input"
            },
            {
              "tagName": "How Controlled Components Work",
              "description": ""
            },
            {
              "tagName": "",
              "description": "The component defines an initial state that contains the form data"
            },
             {
              "tagName": "Initial State: ",
              "description": "The value of each form element is bound to the state"
            },
             {
              "tagName": "Form Element Value:",
              "description": "The component defines an initial state that contains the form data"
            },
             {
              "tagName": "Event Handling:",
              "description": "Changes to the form elements are handled by event handlers (usually onChange) which update the state."
            },
             {
              "tagName": "Rendering:",
              "description": " The component re-renders whenever the state changes, ensuring the input reflects the current state."
            }
            
          ]
        },
          {
          "type": "subsection",
          "subhead": "UnControlled Components",
          "points": [
            {
              "tagName": "",
              "description": "1. Form data is handled by the DOM itself rather than the React state."
            },
            {
              "tagName": "",
              "description": "2. This can be done using refs to access the form values"
            }
          
            
          ]
        }
      ],
       "examples": {
        "title": " Forms",
        "Language": "react",
        "code": "-->Forms\n-->Controlled Components\n\nimport React, { useState } from 'react';\nfunction ControlledInput() {\n const [fullName, setFullName] = useState('');\n const handleChange = (event) => {\n  setFullName(event.target.value);\n };\n const handleSubmit = (event) => {\n  event.preventDefault();\n  alert(`Form submitted with input: ${fullName}`);\n };\n return (\n  <form onSubmit={handleSubmit}>\n   Full Name:\n   <input type=\"text\" value={fullName} onChange={handleChange} />\n   <button type=\"submit\">Submit</button>\n  </form>\n );\n}\nexport default ControlledInput;\n\n-->UnControlled Components\n\nimport React, { useRef } from 'react';\nfunction UncontrolledInput() {\n const inputRef = useRef(null);\n const handleSubmit = (event) => {\n  event.preventDefault();\n  alert(`Form submitted with input: ${inputRef.current.value}`);\n };\n return (\n  <form onSubmit={handleSubmit}>\n   <input type=\"text\" ref={inputRef} />\n   <button type=\"submit\">Submit</button>\n  </form>\n );\n}\nexport default UncontrolledInput;\n"


      }
     
    },
    {
      "topicID": 26,
      "head": "Server-Side Communication",
      "title": "Server-Side Communication",
      "notes": [
        {
          "type": "numbers",
          "list": [
" Fetch API comes with the fetch() method, which is used to fetch data from different sources.",
" It takes one mandatory argument, the URL to the resource you want to fetch.",
" It returns a promise that resolves to the response object representing the response to the request.",
"It uses promises to handle asynchronous operations and supports a variety of HTTP methods and response types."

]
 
        }
      ],
       "examples": {
        "title": " Server-Side Communication",
        "Language": "react",
        "code": "import React, { useState, useEffect } from 'react';\nfunction FetchAPI() {\n const [data, setData] = useState([]);\n const [error, setError] = useState(null);\n useEffect(() => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n   .then(response => {\n    if (!response.ok) {\n     throw new Error('Network response was not ok');\n    }\n    return response.json();\n   })\n   .then(data => setData(data))\n   .catch(error => setError(error.message));\n }, []);\n if (error) { return <div>Error: {error}</div>; }\n return (\n  <ul>{data.map(post => ( <li key={post.id}>{post.title}</li>))}</ul>\n );\n}\nexport default FetchAPI;\n\nfetch('https://jsonplaceholder.typicode.com/posts', {\n method: 'POST',\n body: JSON.stringify({ key: 'New value' })\n})\n.then(response => {\n return response.json();\n})\n.then(data => {\n console.log(data);\n})\n.catch(error => {\n console.error('Issue with the fetch operation:', error);\n});"


      }
     
    },
     {
      "topicID": 27,
      "head": "AXIOS",
      "title": "AXIOS",
      "notes": [
        {
          "type": "numbers",
          "list": [
"Axios simplifies HTTP requests and enhances the handling of asynchronous operations, including error management and interceptors.",
"How to integrate Axios in a React application:",
"--------->Installation<---------------",
"npm install axios",
"HTTP Request Methods",
"GET: Retrieve data from a server.",
"POST: Send data to a server to create a new resource.",
"PUT: Update an existing resource on a server.",
"PATCH: Partially update an existing resource on a server.",
"DELETE: Remove a resource from a server."


]
 
        }
      ],
        "examples": {
        "title": " AXIOS",
        "Language": "react",
  "code":"--> Axios- GET Request\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nuseEffect(() => {\n axios.get('https://jsonplaceholder.typicode.com/posts')\n  .then(response => {\n   setData(response.data);\n  })\n  .catch(error => {\n   setError(error.message);\n  });\n}, []);\n\n-->Axios- POST, PUT, or DELETE methods\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nuseEffect(() => {\n axios.post('https://jsonplaceholder.typicode.com/posts', {title, userId: 1})\n  .then(response => {\n   setData(response.data);\n  })\n  .catch(error => {\n   setError(error.message);\n  });\n}, []);\n\n--> Axios with Async/Await\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nuseEffect(() => {\n const fetchServerData = async () => {\n  try {\n   const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n   setData(response.data);\n  } catch (error) {\n   setError(error.message);\n  }\n };\n fetchServerData();\n}, []);\n\n--> Handling Errors\n\nconst fetchData = async () => {\n try {\n  const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n  setData(response.data);\n } catch (error) {\n  setError(error.message);\n  console.error('Error:', error.response ? error.response.data : error.message);\n }\n};"

      }
     
    },
     {
      "topicID": 27,
      "head": "Performance Optimization",
      "title": "Performance Optimization",
      "notes": [
        {
          "type": "numbers",
          "list": [
"Anonymous Arrow Functions",
"An anonymous arrow function is a type of function that:",
"It doesn't have an explicit identifier (function name).",
" Uses the arrow syntax (=>)",
" Is often used inline"
]
 
        }
      ],
       "examples": {
        "title": " Performance Optimization",
        "Language": "react",
        "code":"Syntax:\n(parameter1, parameter2, ...) => expression\n\n--> Examples\n\nconst result = (x => x * 2)(5); // 10 - Inline function\n[1, 2, 3].map(num => num * 2); // [2, 4, 6] - Callback function\nconst multiply = (a, b) => a * b; // Assigned to Variables\nconsole.log(multiply(3, 4)); // Output: 12\n//Event Listeners\ndocument.addEventListener('click', () => console.log('Clicked!'));\n\nWhat is the result of this?\nlet result = ((x, y) => x + y * 2)(5, 3)\n"

      }
     
    }

  ]
}
